// Code generated by protoc-gen-go from "echo.proto"
// DO NOT EDIT!

package echoservice

import proto "code.google.com/p/goprotobuf/proto"
import "math"

import "net"
import "net/rpc"
import "github.com/kylelemons/go-rpcgen/codec"

// Reference proto and math imports to suppress error if they are not otherwise used.
var _ = proto.GetString
var _ = math.Inf

type Payload struct {
	Message          *string `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (this *Payload) Reset()         { *this = Payload{} }
func (this *Payload) String() string { return proto.CompactTextString(this) }

func init() {
}

// EchoService is an interface satisfied by the generated client and
// which must be implemented by the object wrapped by the server.
type EchoService interface {
	Echo(in *Payload, out *Payload) error
}

// internal wrapper for type-safe RPC calling
type rpcEchoServiceClient struct {
	*rpc.Client
}

func (this rpcEchoServiceClient) Echo(in *Payload, out *Payload) error {
	return this.Call("EchoService.Echo", in, out)
}

// NewEchoServiceClient returns an *rpc.Client wrapper for calling the methods of
// EchoService remotely.
func NewEchoServiceClient(conn net.Conn) EchoService {
	return rpcEchoServiceClient{rpc.NewClientWithCodec(codec.NewClientCodec(conn))}
}

// ServeEchoService serves the given EchoService backend implementation on conn.
func ServeEchoService(conn net.Conn, backend EchoService) error {
	srv := rpc.NewServer()
	if err := srv.RegisterName("EchoService", backend); err != nil {
		return err
	}
	srv.ServeCodec(codec.NewServerCodec(conn))
	return nil
}

// DialEchoService returns a EchoService for calling the EchoService servince at addr (TCP).
func DialEchoService(addr string) (EchoService, error) {
	conn, err := net.Dial("tcp", addr)
	if err != nil {
		return nil, err
	}
	return NewEchoServiceClient(conn), nil
}

// ListenAndServeEchoService serves the given EchoService backend implementation
// on all connections accepted as a result of listening on addr (TCP).
func ListenAndServeEchoService(addr string, backend EchoService) error {
	clients, err := net.Listen("tcp", addr)
	if err != nil {
		return err
	}
	srv := rpc.NewServer()
	if err := srv.RegisterName("EchoService", backend); err != nil {
		return err
	}
	for {
		conn, err := clients.Accept()
		if err != nil {
			return err
		}
		go srv.ServeCodec(codec.NewServerCodec(conn))
	}
	panic("unreachable")
}
